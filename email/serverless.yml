# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${env:SERVICE_NAME, 'email'}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '4'

provider:
  name: aws
  runtime: ${env:RUNTIME, 'nodejs22.x'}
  endpointType: ${env:ENDPOINT_TYPE, 'regional'}
  profile: ${env:APP_NAME, 'taleofddh'}

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    REGION: ${opt:region, 'eu-west-1'}
    APP_NAME: ${env:APP_NAME, 'taleofddh'}
    SERVICE_NAME: ${env:SERVICE_NAME, 'email'}
    FROM_ADDRESS: ${env:FROM_ADDRESS, 'helpdesk@taleofddh.com'}
    CONFIG_SET: ${env:CONFIG_SET, 'taleofddh-configset'}

  apiGateway:
    shouldStartNameWithService: true

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - kms:Encrypt
        - kms:Decrypt
        - kms:ReEncrypt*
        - kms:GenerateDataKey*
        - kms:DescribeKey
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendTemplatedEmail
        - ses:SendBulkTemplatedEmail
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true

functions:
  sendRequestMessage:
    handler: handler.sendRequestMessage
    events:
      - http:
          path: sendRequestMessage
          method: post
          cors: true
    environment:
      TEMPLATE_NAME: "Request"

  sendSubscriptionMessage:
    handler: handler.sendSubscriptionMessage
    events:
      - http:
          path: sendSubscriptionMessage
          method: post
          cors: true
    environment:
      TEMPLATE_NAME: "Subscription"

  sendPromotionMessage:
    handler: handler.sendPromotionMessage
    events:
      - http:
          path: sendPromotionMessage
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TEMPLATE_NAME: "Promotion"

# you can add CloudFormation resource templates here
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-domain-manager
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: ${env:API_DOMAIN, 'taleofddh.com'}
    dev: ${self:custom.stage}-${env:API_DOMAIN, 'taleofddh.com'}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ${env:BASE_PATH, 'blog'}
    stage: ${self:custom.stage}
    certificateName: ${env:CERTIFICATE_NAME, '*.taleofddh.com'}
    hostedZoneId: ${env:HOSTED_ZONE_ID, 'Z044305914KLOWN7PAF5E'}
    createRoute53Record: true
    endpointType: ${env:ENDPOINT_TYPE, 'regional'}
    securityPolicy: ${env:SECURITY_POLICY, 'tls_1_2'}
    apiType: ${env:API_TYPE, 'rest'}