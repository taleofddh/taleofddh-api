# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${env:SERVICE_NAME}
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: ${env:RUNTIME}
  endpointType: ${env:ENDPOINT_TYPE}
  profile: ${env:APP_NAME}

  # you can overwrite defaults here
  stage: ${opt:stage, dev}
  region: ${opt:region, eu-west-1}
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    REGION: ${opt:region, eu-west-1}

  apiGateway:
    shouldStartNameWithService: true

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - secretsmanager:GetSecretValue
        - kms:Encrypt
        - kms:Decrypt
        - kms:ReEncrypt*
        - kms:GenerateDataKey*
        - kms:DescribeKey
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:*:*:table/${self:provider.stage}.${env:APP_NAME}.${self:service}.*

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true

functions:
  findAlbumList:
    handler: handler.findAlbumList
    events:
      - http:
          path: albumList
          method: get
          cors: true
    environment:
      TABLE_NAME: "album"

  findRestrictedAlbumList:
    handler: handler.findRestrictedAlbumList
    events:
      - http:
          path: albumListRestricted
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "album"

  updateAlbumViewCount:
    handler: handler.updateAlbumViewCount
    events:
      - http:
          path: albumViewCount
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "album"

  findAlbumPhotoList:
    handler: handler.findAlbumPhotoList
    events:
      - http:
          path: albumPhotoList
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "photo"

  findPhotoList:
    handler: handler.findPhotoList
    events:
      - http:
          path: photoList
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "photo"

  findRestrictedPhotoList:
    handler: handler.findRestrictedPhotoList
    events:
      - http:
          path: photoListRestricted
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "photo"

  updatePhotoViewCount:
    handler: handler.updatePhotoViewCount
    events:
      - http:
          path: photoViewCount
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: "photo"

# you can add CloudFormation resource templates here
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  dotenv:
    include:
      - APP_NAME
      - SERVICE_NAME
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: ${env:API_DOMAIN}
    dev: ${self:custom.stage}-${env:API_DOMAIN}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ${env:BASE_PATH}
    stage: ${self:custom.stage}
    certificateName: ${env:CERTIFICATE_NAME}
    hostedZoneId: ${env:HOSTED_ZONE_ID}
    createRoute53Record: true
    endpointType: ${env:ENDPOINT_TYPE}
    securityPolicy: ${env:SECURITY_POLICY}
    apiType: ${env:API_TYPE}
